#<<: !include secrets.yaml
esphome:
  name: dhwmonitor
  platform: ESP32
  board: esp32doit-devkit-v1
  includes:
    - dhwmonitor.h
  on_boot:
    priority: 30
    then:
      - light.turn_on:
          id: back_light
          brightness: 60%

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .thompson.lan
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Waterdepth1 Fallback Hotspot"
    password: "mYJr5Q9cloL4"

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

time:
  - platform: homeassistant
    id: esptime
    timezone: Europe/London

font:
  - file: "segoeui.ttf"
    id: font_sml
    size: 13
    #glyphs: "!%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz▂▄▆█"
  - file: "segoeui.ttf"
    id: font_med
    size: 30
  - file: "segoeui.ttf"
    id: font_max
    size: 72
  - file: "materialdesignicons-webfont.ttf"
    id: font_icon
    size: 30
    glyphs: [
      "\U000F0FC6", # mdi-lock-open
    ]

image:
  - file: "peter_100x100.png"
    id: gradient_img
    resize: 100x100
    type: RGB24
  - file: "gradient_100x100.jpeg"
    id: gradient_img2
    resize: 100x100
    type: RGB24

animation:
  - file: "flame10.gif"
    id: flame_gif
    resize: 32x32
    type: RGB24
  - file: "sun3.gif"
    id: sun_gif
    resize: 32x32
    type: RGB24

# interval:
#   - interval: 0.2s
#     then:
#       lambda: |-
#         id(flame_gif).next_frame();

color:
  - id: darkbrown1
    red: 76%
    green: 61%
    blue: 42%
  - id: darkblue1
    red: 2%
    green: 14%
    blue: 24%
  - id: lightblue1
    red: 35%
    green: 42%
    blue: 52%
  - id: lightbrown1
    red: 78%
    green: 71%
    blue: 58%
  - id: my_red
    red: 100%
    green: 3%
    blue: 5%

# spi:
#   clk_pin: GPIO18
#   mosi_pin: GPIO19

sensor:
  - platform: wifi_signal
    name: Wifi SSI
    id: wifi_ssi
    update_interval: 5s
    internal: true
  - platform: homeassistant
    name: "Tank Sensor 1 HA"
    entity_id: sensor.temperature1
    id: temperature1
  - platform: homeassistant
    name: "Tank Sensor 2 HA"
    entity_id: sensor.temperature2
    id: temperature2
  - platform: homeassistant
    name: "Tank Sensor 3 HA"
    entity_id: sensor.temperature3
    id: temperature3
  - platform: homeassistant
    name: "Tank Sensor 4 HA"
    entity_id: sensor.temperature4
    id: temperature4
  - platform: homeassistant
    name: "Tank Sensor 5 HA"
    entity_id: sensor.temperature5
    id: temperature5
  - platform: homeassistant
    name: "Tank Sensor 6 HA"
    entity_id: sensor.temperature6
    id: temperature6
  - platform: homeassistant
    name: "Tank Sensor 7 HA"
    entity_id: sensor.temperature7
    id: temperature7
  - platform: homeassistant
    name: "HW Remaining L"
    entity_id: sensor.hot_water_remaining_l
    id: hwremaining_l
  - platform: homeassistant
    id: current_temperature
    entity_id: climate.your_thermostat
    attribute: current_temperature
  - platform: homeassistant
    id: target_temperature
    entity_id: climate.your_thermostat
    attribute: temperature

text_sensor:
  - platform: wifi_info
    ssid:
      name: Connected SSID
      id: wifi_ssid
      internal: true
  - platform: homeassistant
    id: ch_mode
    entity_id: climate.your_thermostat
    attribute: preset_mode
  - platform: homeassistant
    id: dhw_mode
    entity_id: water_heater.hot_water
    attribute: operation_mode




output:
  - platform: ledc
    pin: GPIO21
    id: beeper
  - platform: ledc
    pin: 15
    id: gpio_32_backlight_pwm
    inverted: true


script:
  - id: beep
    then:
      - output.turn_on: beeper
      - output.ledc.set_frequency:
          id: beeper
          frequency: "2000Hz"
      - output.set_level:
          id: beeper
          level: "50%"
      - delay: 0.01s
      - output.turn_off: beeper

spi:
 clk_pin: 18
 mosi_pin: 23
 miso_pin: 19


xpt2046:
  id: touchscreen
  cs_pin: 14
  irq_pin: 27
  update_interval: 50ms
  report_interval: 1s
  dimension_x: 240
  dimension_y: 320
  #swap_x_y: true
  on_state:
    - lambda: |-
        if (touched)
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%d",
              id(touchscreen).x,
              id(touchscreen).y,
              id(touchscreen).x_raw,
              id(touchscreen).y_raw
              );

binary_sensor:
  - platform: xpt2046
    xpt2046_id: touchscreen
    id: ch_boost_key0
    x_min: 20 #0+20
    x_max: 220 #240-20
    y_min: 180 #320/2+20
    y_max: 300 #320-20
    on_press:
      then:
        - script.execute: beep
        - if:
            condition:
              lambda: 'return id(ch_boost_local).state == "none";'
            then:
              - select.set:
                  id: ch_boost_local
                  option: "boost"
            else:
              - select.set:
                  id: ch_boost_local
                  option: "none"

  - platform: xpt2046
    xpt2046_id: touchscreen
    id: dhw_boost_key0
    x_min: 20 #0+20
    x_max: 220 #240-20
    y_min: 20 #0+20
    y_max: 180 #320/2-20
    on_press:
      then:
        - script.execute: beep
        - if:
            condition:
              lambda: 'return id(dhw_boost_local).state == "none";'
            then:
              - select.set:
                  id: dhw_boost_local
                  option: "boost"
              - homeassistant.service: # intelligent boost dhw
                  service: script.1632605690960
            else:
              - select.set:
                  id: dhw_boost_local
                  option: "none"
              - homeassistant.service: # intelligent boost dhw stop
                  service: script.turn_off
                  data:
                    entity_id: script.1632605690960
              - homeassistant.service: # also stop the boost.
                  service: hive.boost_hot_water
                  data:
                    on_off: 'off'
                    entity_id: water_heater.hot_water
                    time_period: '00:01:00'
    # on_state:
    #   - lambda: 'ESP_LOGI("main", "key0: %s", (x ? "touch" : "release"));'
  - platform: homeassistant
    entity_id: binary_sensor.aqaradoor3
    id: conservatory_door_lock
    internal: true
  - platform: homeassistant
    entity_id: binary_sensor.aqaradoor5
    id: garage_door_lock
    internal: true
  - platform: homeassistant
    entity_id: binary_sensor.aqaradoor4
    id: kitchen_door_lock
    internal: true
  - platform: homeassistant
    id: solar_heater
    entity_id: switch.immersion_heater
    internal: true


select:
  - platform: template
    id: dhw_boost_local
    optimistic: true
    options:
      - "none"
      - "boost"
  - platform: template
    id: ch_boost_local
    optimistic: true
    options:
      - "none"
      - "boost"
    #internal: true



# font:
#   - file: "arial.ttf"
#     id: my_font
#     size: 20



# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_32_backlight_pwm
    name: "ILI9341 Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON


display:
  - platform: ili9341
    model: TFT 2.4
    cs_pin: 5
    dc_pin: 4
    led_pin: 15
    reset_pin: 22
    rotation: 90
    id: tft_ha
    color_palette: IMAGE_ADAPTIVE
    color_palette_images:
      #- "peter_100x100.png"
      - "display_design.png"
    update_interval: 1s
    lambda: |-
      id(flame_gif).next_frame();
      id(sun_gif).next_frame();
      //it.fill(Color::BLACK);
      signed int ssi = (signed int)id(wifi_ssi).state;
      it.strftime(1, 2, id(font_sml), lightblue1, TextAlign::TOP_LEFT, "%H:%M", id(esptime).now());
      it.printf(it.get_width()-30-5, 2, id(font_sml), lightblue1, TextAlign::TOP_RIGHT, "%s", id(wifi_ssid).state.c_str());
      it.printf(it.get_width()-30, 2, id(font_sml), lightblue1, TextAlign::TOP_LEFT, "%c%c%c%c", ssi > -80 ? '-' : '-', ssi>-75 ? '-' : ' ', ssi>-70 ? '-' : ' ', ssi>-67 ? '-' : ' ');
      // draw temperature gradient filled sausage shaped tank.
      int x = 320-100;
      int y = 22;
      int width = 100;
      int height =180;
      float temps[] = {
        id(temperature1).state,
        id(temperature2).state,
        id(temperature3).state,
        id(temperature4).state,
        id(temperature5).state,
        id(temperature6).state,
        id(temperature7).state
      };
      int count=7;

      for (int i=0; i<count; i++)
      {
        it.printf(320-102, 22+(height*i/(count)), id(font_sml), lightblue1, TextAlign::TOP_RIGHT, "%.1f", temps[i]);
      }

      assert(count > 1);
      float r = (float)width/2;
      float w, x1, x2, l;
      // Draw out a tank a line at a time.
      for (int i=0; i<height; i++)
      {
          // calculate the start and finish x coordinates of each line.
          if (i<r) // top semicircle
          {
              w = sqrt(2*r*i - i*i);
              //printf("x=%3.1f\n", r-x);
          }
          else if (i<(height-r)) //middle straight section
          {
              w = r;
          }
          else // bottom semicircle
          {
              l = (height - i);
              w = sqrt(2*r*l - l*l);
          }

          x1 = int(r - w);
          x2 = int(r + w);
          int i1 = i * (count-1)/ height;

          int i2 = i1+1;

          // Calculate interpolated temperature at this height.
          float temp1 = temps[i1];
          float temp2 = temps[i2];
          int h1 = i1 * (float)height/(count-1);
          int h2 = i2 * (float)height/(count-1);
          float temp = temp1 + (temp2-temp1) * (float)(i-h1)/(float)(h2-h1);
          // convert temperature to a color
          Color c = temp_to_color(temp);
          it.line(x + x1, y + i, x + x2, y + i, c);
      }

      it.printf(320-width/2, 100, id(font_med), COLOR_ON, TextAlign::BOTTOM_CENTER, "%.0fL", id(hwremaining_l).state);
      it.printf(320-width/2, 102, id(font_med), COLOR_ON, TextAlign::TOP_CENTER, "(%.1f)", id(hwremaining_l).state/120);

      it.printf(it.get_width()/4, 100, id(font_max), COLOR_ON, TextAlign::BOTTOM_CENTER, "%.1f", id(current_temperature).state);
      it.printf(it.get_width()/4, 100, id(font_med), COLOR_ON, TextAlign::TOP_CENTER, "%.1f°C", id(target_temperature).state);

      if (id(ch_boost_local).state == "on" || id(ch_boost_local).state == "boost") {
        //Color (100, 85, 0) yellow
        it.print(it.get_width()/4, 140, id(font_med), COLOR_ON, TextAlign::TOP_CENTER, "BOOST");
      }
      //it.printf(it.get_width()/4, 160, id(font_med), COLOR_ON, TextAlign::TOP_CENTER, "s=%s", id(ch_mode).state.c_str());
      if (id(ch_mode).state == "boost") {
         it.image(it.get_width()/4-15, 203, id(flame_gif), COLOR_ON, COLOR_OFF);
      }
      if (id(dhw_boost_local).state == "boost") {
        //Color (100, 85, 0) yellow
        it.print(320-width/2, 140, id(font_med), COLOR_ON, TextAlign::TOP_CENTER, "BOOST");
      }
      //it.printf(320-width/2, 160, id(font_med), COLOR_ON, TextAlign::TOP_CENTER, "s=%s", id(dhw_mode).state.c_str());
      if (id(dhw_mode).state == "on" || id(dhw_mode).state == "boost") {
         it.image(it.get_width() - 50-16, 203, id(flame_gif));
      }
      else if (id(solar_heater).state) {
         it.image(it.get_width() - 50-16, 203, id(sun_gif));
      }

      if (id(conservatory_door_lock).state) {
        it.print(50, 68, id(font_icon),  my_red, TextAlign::BOTTOM_CENTER, "\U000F0FC6");
        it.print(50, 69, id(font_sml), my_red, TextAlign::TOP_CENTER, "Conservatory");
      }

      if (id(garage_door_lock).state || id(kitchen_door_lock).state || id(garage_door_lock).state) {
        it.print(it.get_width()/2, 200, id(font_icon), my_red, TextAlign::BOTTOM_CENTER, "\U000F0FC6");
        it.printf(it.get_width()/2, 201, id(font_sml), my_red, TextAlign::TOP_CENTER, "%s%s%s",
          id(conservatory_door_lock).state ? "Conservatory " : "",
          id(kitchen_door_lock).state ? "Kitchen " : "",
          id(garage_door_lock).state ? "Garage " : "");
      }
